To integrate real-time currency conversion into your Django application for the `generate_funds` view, you can utilize a free currency conversion API. This will ensure that the funds are generated in the user's wallet according to their selected currency, even if the admin inputs a different currency.

Here's how you can implement this:

---

### üßæ Step 1: Choose a Free Currency Conversion API

Based on your requirements, here are some free APIs you can consider:

* **[ExConvert](https://exconvert.com/)**: Offers unlimited requests per month and supports real-time exchange rates for over 145 currencies. ([Free Currency Conveter API][1])

* **[UniRateAPI](https://unirateapi.com/)**: Provides real-time exchange rates for 593 currencies, including cryptocurrencies, with no usage limits. ([unirateapi.com][2])

* **[Currencylayer](https://currencylayer.com/)**: Delivers real-time exchange rates for 168 world currencies, with updates ranging from every 60 minutes to every 60 seconds. ([Currencylayer][3])

For this example, we'll use **ExConvert** due to its unlimited free requests and comprehensive currency support.([Free Currency Conveter API][1])

---

### üõ†Ô∏è Step 2: Update the `generate_funds` View

Modify your `generate_funds` view to convert the deposit amount to the user's currency before updating their wallet balance.

```python
import requests
from django.contrib.admin.views.decorators import staff_member_required
from django.shortcuts import render
from .models import User, Transaction

@staff_member_required
def generate_funds(request):
    if request.method == 'POST':
        username = request.POST['username']
        amount = float(request.POST['amount'])
        currency = request.POST['currency']

        try:
            user = User.objects.get(username=username)

            # Fetch the exchange rate from ExConvert
            url = f"https://api.exconvert.com/convert?api_key=your_api_key&amount={amount}&from={currency}&to={user.currency}"
            response = requests.get(url)
            data = response.json()

            if response.status_code == 200 and 'result' in data:
                converted_amount = data['result']
            else:
                return render(request, 'wallet/generate_funds.html', {'error': 'Currency conversion failed.'})

            # Update user's wallet balance
            user.wallet_balance += converted_amount
            user.save()

            # Record the transaction
            Transaction.objects.create(
                sender=user,
                receiver=user,
                amount=converted_amount,
                transaction_type='Deposit',
                status='Completed',
                currency=user.currency
            )

            return render(request, 'wallet/generate_funds.html', {'message': f'Funds generated successfully: {converted_amount} {user.currency}'})
        except User.DoesNotExist:
            return render(request, 'wallet/generate_funds.html', {'error': 'User not found'})
    return render(request, 'wallet/generate_funds.html')
```

**Note**: Replace `your_api_key` with your actual API key from ExConvert.

---

### üßæ Step 3: Update the `generate_funds.html` Template

Ensure that the template allows the admin to select the currency in which they want to deposit funds.

```html
<form method="POST">
    {% csrf_token %}
    <label for="username">Username:</label>
    <input type="text" name="username" required><br>

    <label for="amount">Amount:</label>
    <input type="number" step="0.01" name="amount" required><br>

    <label for="currency">Currency:</label>
    <select name="currency" required>
        <option value="USD">USD</option>
        <option value="NGN">NGN</option>
        <option value="EUR">EUR</option>
        <option value="GBP">GBP</option>
    </select><br>

    <button type="submit">Generate Funds</button>

    {% if message %}
        <p style="color: green;">{{ message }}</p>
    {% endif %}
    {% if error %}
        <p style="color: red;">{{ error }}</p>
    {% endif %}
</form>
```

---

### üîê Step 4: Secure Your API Key

To prevent unauthorized access to your API key, store it in your Django project's settings.

1. Add the API key to your `settings.py`:

   ```python
   EXCONVERT_API_KEY = 'your_api_key'
   ```

2. Update the view to use this setting:([freeforexapi.com][4])

   ```python
   from django.conf import settings

   # Replace the API key in the URL with settings.EXCONVERT_API_KEY
   url = f"https://api.exconvert.com/convert?api_key={settings.EXCONVERT_API_KEY}&amount={amount}&from={currency}&to={user.currency}"
   ```

---

### ‚úÖ Step 5: Test the Implementation

After implementing the changes:

1. Start your Django development server.

2. Log in to the Django admin interface.

3. Navigate to the `generate_funds` page.

4. Select a user, enter an amount, choose a currency, and submit the form.

The user's wallet balance should update according to the selected currency, and a corresponding transaction should be recorded.

---

If you need further assistance with integrating other features like transaction history, notifications, or enhancing the user interface, feel free to ask!

[1]: https://exconvert.com/?utm_source=chatgpt.com "Free Exchange rate API | Free Currency Converter API - ExConvert"
[2]: https://unirateapi.com/?utm_source=chatgpt.com "Free Currency Exchange API - Real-Time Rates - UniRateAPI"
[3]: https://currencylayer.com/?utm_source=chatgpt.com "Free Currency Exchange API & Forex Rates API | Currencylayer"
[4]: https://freeforexapi.com/?utm_source=chatgpt.com "Free Forex API | Foreign exchange rates and currency conversion"


from django.shortcuts import render, redirect
from .models import User, Transaction
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from django.db import transaction

@login_required
def transfer_funds(request):
    if request.method == 'POST':
        receiver_username = request.POST['receiver_username']
        amount = float(request.POST['amount'])
        receiver = User.objects.get(username=receiver_username)
        sender = request.user

        if sender.wallet_balance >= amount:
            try:
                with transaction.atomic():
                    sender.wallet_balance -= amount
                    receiver.wallet_balance += amount
                    sender.save()
                    receiver.save()

                    # Create a new transaction record
                    Transaction.objects.create(
                        sender=sender,
                        receiver=receiver,
                        amount=amount,
                        transaction_type='Transfer',
                        status='Completed'
                    )
                    return JsonResponse({'status': 'Success'})
            except Exception as e:
                return JsonResponse({'status': 'Error', 'message': str(e)})
        else:
            return JsonResponse({'status': 'Error', 'message': 'Insufficient balance'})
    return render(request, 'wallet/transfer_funds.html')

from paystackapi.paystack import Paystack

paystack = Paystack(secret_key='your-secret-key')

def initiate_payment(request):
    if request.method == 'POST':
        amount = request.POST['amount']
        email = request.POST['email']

        response = paystack.transaction.initialize(
            amount=int(amount) * 100,  # Convert to kobo
            email=email,
            callback_url='http://yourwebsite.com/payment/callback'
        )

        if response['status']:
            return redirect(response['data']['authorization_url'])
        else:
            return JsonResponse({'status': 'Error', 'message': response['message']})

def payment_callback(request):
    # Handle Paystack callback
    pass


py manage.py makemigrations
py manage.py migrate
